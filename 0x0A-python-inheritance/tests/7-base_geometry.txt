test main file:
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("my_int", 12)
	>>> bg.integer_validator("width", 89)
	>>> try:
	...     bg.integer_validator("name","John")
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] name must be an integer
	>>> try:
	...     bg.integer_validator("age",0)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	[ValueError] age must be greater than 0
	>>> try:
	...     bg.integer_validator("distance", -4)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	[ValueError] distance must be greater than 0

test area:
	>>> try:
	...     bg.area()
	... except Exception as e:
	...     print(e)
	area() is not implemented

test empty integer_validator:
	>>> try:
	...     bg.integer_validator()
	... except Exception as e:
	...     print(e)
	integer_validator() missing 2 required positional arguments: 'name' and 'value'

test input list:
	>>> try:
	...     bg.integer_validator("data", [])
	... except Exception as e:
	...     print(e)
	data must be an integer

test input None:
	>>> try:
	...     bg.integer_validator("data", None)
	... except Exception as e:
	...     print(e)
	data must be an integer

test input boolean:
	>>> try:
	...     bg.integer_validator("data", True)
	... except Exception as e:
	...     print(e)
	data must be an integer

test input set:
	>>> try:
	...     bg.integer_validator("data", {1,3})
	... except Exception as e:
	...     print(e)
	data must be an integer

test input list:
	>>> try:
	...     bg.integer_validator("data", [1])
	... except Exception as e:
	...     print(e)
	data must be an integer

########################
#    UNUSEFUL TESTS    #
########################

test empty value:
	>>> try:
	...     bg.integer_validator("data")
	... except Exception as e:
	...     print(e)
	integer_validator() missing 1 required positional argument: 'value'

test input dict:
	>>> try:
	...     bg.integer_validator("data", {"hello":10})
	... except Exception as e:
	...     print(e)
	data must be an integer

test input float:
	>>> try:
	...     bg.integer_validator("data", 10.3)
	... except Exception as e:
	...     print(e)
	data must be an integer

test input name as empty list:
	>>> try:
	...     bg.integer_validator([], 13)
	... except Exception as e:
	...     print(e)
